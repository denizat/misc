// tokens
INCOP = ++
DECOP = --
NUMBER = ([1-9] | _)*
STRING = ".*"
CHAR = '\? [0-9][a-Z]'

// grammar

constant: number | string | char

// primary expression
pexpr	: symbol | constant | '(' expr ')'

// postfix expression
pfx 	: pexpr
	| pfx '(' ')'
	| pfx '(' args ')'
	| pfx . symbol
	| pfx INCOP
	| pfx DECOP

args	: aexpr
	| args ',' aexpr

// unary expression
uexpr	:























function -> symbol symbol ( 	// int main (
function -> symbol ( args ) : 	// main():

statement -> expression \n	// print(100)

expression -> ...

goto -> label symbol	// label main_loop

forloop -> for (symbol,)* symbol in (symbol,)* symbol : // for a in list:
							// can be used as an iterator
forloop -> for ( decl ; cond ; end ) :			// for (int i = 0; i < 100; i++):

if -> if cond :
elif -> elif cond :
else -> else :

return -> return value

static -> static
const -> const

and -> and | &&
or -> or | ||

namespace -> namespace name :

class -> class name :

enum -> enum

import -> import name

funcptr -> ( args => ret )

symbol -> [a-z][A-Z]
