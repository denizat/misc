{"mappings":"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","sources":["src/test.ts","src/lib.ts","src/chessHandler.ts"],"sourcesContent":["import { idsmap, handlers, connections, ParsedMessage, frontendSend, addHandler } from \"./lib\"\nimport { WebSocket, WebSocketServer } from \"ws\"\nimport { v4 } from \"uuid\"\nimport { chessHandler, ChessMessage } from \"./chessHandler\"\nconst uuid = v4\n\naddHandler(chessHandler)\n\nconst server = new WebSocketServer({ port: 8010 })\n\nserver.on('connection', socket => {\n    console.log(idsmap);\n\n    let thisUuid = uuid();\n    connections.set(thisUuid, socket)\n\n    socket.on('message', (message) => {\n        let pm: ParsedMessage<any, any> = JSON.parse(message.toString())\n        handlers.get(pm.handler).onMessage(pm, thisUuid)\n    })\n\n    handlers.forEach(handler => {\n        handler.onOpen?.(thisUuid)\n    })\n\n    socket.on('close', () => {\n        handlers.forEach(handler => {\n            handler.onClose?.(thisUuid)\n        })\n    })\n\n\n})\n\nconst newConnection = () => {\n    let ws = new WebSocket(\"ws://localhost:8010\")\n    ws.on('open', (message) => {\n        let outMessage: ChessMessage = {\n            handler: 'chessHandler',\n            action: 'join-game',\n            data: 'hello'\n\n        }\n        frontendSend(ws, outMessage)\n\n    })\n    ws.on('message', (message) => {\n        let pm: ParsedMessage<any, any> = JSON.parse(message.toString())\n        console.log(pm);\n        if (pm.handler == 'chessHandler') {\n            pm = (pm as ChessMessage)\n            console.log(pm);\n\n            console.log(idsmap);\n\n        }\n    })\n}\n\nnewConnection()\nnewConnection()","import { WebSocket } from \"ws\"\nexport interface ParsedMessage<TAction, TData> {\n    // which handler should get it\n    handler: string,\n    // what the handler should do with the data\n    action: TAction,\n    data: TData\n}\n\n\n\nexport interface Handler {\n    handlerName: string\n    onOpen?: (id: string) => void,\n    onMessage?: (message: ParsedMessage<any, any>, id: string) => void\n    onClose?: (id: string) => void\n}\n\nexport const handlers = new Map<string, Handler>()\nexport const addHandler = (handler: Handler) => {\n    handlers.set(handler.handlerName, handler)\n}\n\nexport const connections = new Map<string, WebSocket>()\nexport const sendMessage = (id: string, message: ParsedMessage<any, any>) => {\n    connections.get(id).send(JSON.stringify(message))\n}\n\nexport const sendAll = (message: ParsedMessage<any, any>) => {\n    // export const sendAll = (message: ParsedMessage) => {\n    connections.forEach((ws) => ws.send(JSON.stringify(message)))\n}\n\nexport const frontendSend = (socket: WebSocket, message: ParsedMessage<any, any>) => {\n    socket.send(JSON.stringify(message))\n}\n\nexport let idsmap = []","import { Handler, idsmap, ParsedMessage, sendAll, sendMessage } from \"./lib\";\n\ntype Board = string[]\ntype Move = string\n\ninterface Game {\n    currentBoard: Board\n    history: Move[]\n    currentTurn: 'black' | 'white'\n    players: Array<string>\n}\n\ntype ChessAction =\n    | 'start-game'\n    | 'join-game'\n    | 'leave-game'\n    | 'make-move'\n    | 'undo-move'\n    | 'update-board'\n\nexport type ChessMessage = ParsedMessage<ChessAction, any>\n\nlet games = new Map<string, Game>()\n\nconst defaultBoard = [\n    'brbnbbbqbkbbbnbr',\n    'wrwnwbwqwkwbwnbr',\n]\n\nidsmap.push(200)\n\nlet handlerName = 'chessHandler'\n\nexport const chessHandler: Handler = {\n    handlerName: handlerName,\n    onMessage: (m: ChessMessage, id) => {\n        switch (m.action) {\n            case 'start-game': {\n                games.set(id, {\n                    currentBoard: defaultBoard,\n                    currentTurn: 'white',\n                    history: [],\n                    players: [id, '']\n                })\n            }\n            case 'leave-game': {\n            }\n            case 'join-game': {\n                idsmap.push(200)\n                console.log(m);\n                console.log(idsmap);\n                sendMessage(id, {\n                    handler: handlerName,\n                    action: 'hello',\n                    data: 'null and void'\n                })\n\n\n            }\n\n        }\n    }\n}\n"],"names":[],"version":3,"file":"test.js.map","sourceRoot":"../"}